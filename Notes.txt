Introduction 

Environmental Setup

Components in ReactJS
    ->Functional level Components
    -> class level Components

communication between Components
    ->state
    ->props

RestAPI Calls
    ->axios module

State Managements
    ->redux
    ->saga
    ->thunk

ECommerce Application

Forms with Validations

Higher Order Functions

19-03-2021:
    Components:
        - Reusable portion of complex UI is called as Component.
        - These components are Reusable.
        - As a React Developer, we can provide communication between components.
        - React Application are Component Based Application.
        - In React, we can create 2 types of components.
            1) Class-level Components
            2) Functional level components
        - Classlevel components also called as stateful components.
        - Functional components also called as stateless components.

            > npx create-react-app components-app --template typescript
            > cd components-app    
    *******************************
        components-app
            src
                First.tsx
                index.tsx (-register your component in this file)
            public 
                index. html  

22-3-2021
=============================================================================
First.tsx:
==========
//import  "React" class which is predefined class used to create Component
import React From "react";

//props is predefined object used to receive data from another components
//we will define props using interface
interface IProps{}

//state is predefined object used to represent the component data
//we will define state using interface
interface IState{}

//create class
class First extends React.Component<IProps,IState>{
    //recieving props at boot time
    constructor(props:IProps){ 
        super(props);
    }

    render(){
        return(
            <h1>Welcome to NawazIT for ReactJS</h1>
        )
    }

};

//export First component
export default First;

//index.tsx
===================================
replace <App/> to <First/>


Second.tsx
===========
import React from 'react';

interface IProps{}
interface IState{}

class Second extends React.Component<IProps,IState>{
    constructor(props:IProps){
        super(props)
    }

    render(){
        return(
            <h1>SecondComponent</h1>
        )
    }
}

export default Second;

Third.tsx
==========
import React from 'react';
import First from './First';
import Second from './Second';

interface IProps{}
interface IState{}

class Third extends React.Component<IProps,IState>{
    constructor(props:IProps){
        super(props)
    }

    render(){
        return(
            <React.Fragment>
               <First/>
               <Second/> 
            </React.Fragment>
        )
    }
}

export default Third;

index.tsx
=========
ReactDOM.render(
  <React.StrictMode>
    <Third />
  </React.StrictMode>,
  document.getElementById('root')
);


23-03-2021
==========
State-app
=========

App.tsx
=======
import React from 'react';

//state - predefined object used to define the component data
// we will define  state by using interfaces
interface IState{
  strData:string,
  numData:number,
  booleanData:boolean,
  strArray:string[],
  objData:any,
  products:any[]
}

interface IProps{

}

class App extends React.Component<IProps,IState>{
    constructor(props:IProps){
      super(props);
      this.state ={
        strData: "Welcome to ReactJS with Typescript",
        numData: 100,
        booleanData: true,
        strArray:['Angular','React','VueJS'],
        objData:{"key1":"Hello_1"},
        products:[
          {"p_id":111,"p_name":"p_one","p_cost":10000},
          {"p_id":222,"p_name":"p_two","p_cost":20000},
          {"p_id":333,"p_name":"p_three","p_cost":30000},
          {"p_id":444,"p_name":"p_four","p_cost":40000},
          {"p_id":555,"p_name":"p_five","p_cost":50000},
        ]
      }
    }

    render(){
      return(
        <React.Fragment>
          <h1>strData:{this.state.strData}</h1><br/>
          <h1>numData:{this.state.numData}</h1><br/>
          <h1>booleanData:{JSON.stringify(this.state.booleanData)}</h1><br/>
          <h1>strArray:</h1>
          {this.state.strArray.map((element:string,index:number)=>(<h1 key={index}>{element}</h1>))}<br/>

          <h1>objData:{this.state.objData.key1}</h1>

          <h1>products:</h1>
          <table>
            <tr>
              <th>SNO</th>
              <th>P_ID</th>
              <th>P_NAME</th>
              <th>P_COST</th>
            </tr>
          
          {this.state.products.map((element:any,index:number)=>(
            <tr key={index}>
              <td>{index+1}</td>
              <td>{element.p_id}</td>
              <td>{element.p_name}</td>
              <td>{element.p_cost}</td>
            </tr>
          ))}
          </table>
        </React.Fragment>
      )
    }

}

export default App;



index.css (used to write global css)
=========
table,th,td{
    border: 1px solid red;
}
table{
  width: 100%;
  border-collapse: collapse;
  text-align: center;
}

th{
  height: 5rem;
  vertical-align: bottom;
}

td{
  height: 3rem;
  font-weight: bold;
  vertical-align: bottom;
}

tr:hover{
  background-color: yellow;
}


24-03-2020
===========

conversion of tsx => jsx by npm/yarn ,
conversion of jsx => js is done by babel tool internally in browser


change-state
=============
App.tsx
=======
import React from 'react';

//state - predefined object used to define the component data
// we will define  state by using interfaces
interface IState{
  sub:string
}

interface IProps{}

class App extends React.Component<IProps,IState>{
    constructor(props:IProps){
      super(props);
      this.state ={
        sub: "ReactJS"
      }
     
    }

    my_fun = ()=>{
      this.setState({
        sub : "ReactJS with Typescript"
      })  
    };
    render(){
      return(
        <React.Fragment>
          <h1>state:{this.state.sub}</h1><br/>
          <button onClick={this.my_fun}>Change State</button>
        </React.Fragment>
      )
    }

}

export default App;
====================

Events.tsx
==========
import React from "react";

interface IState{
    msg:string;
}

interface IProps{}

class Events extends React.Component<IProps,IState>{

    constructor(props:IProps){
        super(props);
        this.state = {
            msg: ""
        }
    }
    fun_one = ()=>{
        this.setState({
            msg: "Function without arguments"
        })
    }
    fun_two = (arg1:string,arg2:string)=>{
        if(arg1=="admin1" && arg2=="admin1"){
            this.setState({
                msg: "Login success"
            })
        }else{
            this.setState({
                msg: "Login failed"
            })
        }
       
    }
    render(){
        return(
        <React.Fragment>
            <h1>{this.state.msg}</h1>
            <button onClick={this.fun_one}>Button1</button>
            <button onClick={()=>this.fun_two('admin1','admin1')}>Button2</button>
        </React.Fragment>
        )
    }
}
export default Events;
Notes:
setState() function used to change the state,
onClick is event used to call the required function



25-03-2021
==========
State:
  -state is the predefined object used to store component data
props:
  -props is the predefined object used to receive data from other component

communication between components:
  we want to send the data from Firstcomponent to Secondcomponent
  This is achieved using props


state- componentData 
props - used to receive data from other components

ex: sending mail to some one ( u need -mailcontent(state of First Component)
                                      -receiveraddress(import SecondComponent in FirstComponent )
                                      -sending(using render() and pass the state to SecondComponent using tag attributes)
                              )

29-03-2021
===========
First.tsx
==========
import React from "react";
import Second from "./Second";
interface IProps { };
interface IState {
    key1: string;
    key2: number;
    key3: boolean;
    key4: any;
    key5: any;
};
class First extends React.Component<IProps, IState>{

    constructor(props: IProps) {
        super(props);
        this.state = {
            key1: "Hello_1",
            key2: 100,
            key3: true,
            key4: { key: "Hello" },
            key5: [
                { "p_id": 111, "p_name": "p_one", "p_cost": 10000 },
                { "p_id": 222, "p_name": "p_two", "p_cost": 20000 },
                { "p_id": 333, "p_name": "p_three", "p_cost": 30000 },
                { "p_id": 444, "p_name": "p_four", "p_cost": 40000 },
                { "p_id": 555, "p_name": "p_five", "p_cost": 50000 }
            ]
        }
    };

    render() {
        return (            
            <React.Fragment>
                <Second key1={this.state.key1}
                    key2={this.state.key2}
                    key3={this.state.key3}
                    key4={this.state.key4}
                    key5={this.state.key5}
                ></Second>
            </React.Fragment>
        )
    }

}
export default First;

Second.tsx
===========
import React from 'react';

interface IProps {
    key1: string;
    key2: number;
    key3: boolean;
    key4: any;
    key5: any;
}
interface IState {};

class Second extends React.Component<IProps, IState>{
    constructor(props: IProps) {
        super(props)
    }

    render() {
        return (
            <React.Fragment>
                <h1>SecondComponent</h1>
                <h1>Key1:{this.props.key1}</h1>
                <h1>Key2:{this.props.key2}</h1>
                <h1>Key3:{JSON.stringify(this.props.key3)}</h1>
                <h1>Key4:{JSON.stringify(this.props.key4)}</h1>
                <h1>key5:</h1>
                <table>                    
                    <tr>
                        <th>SL.No</th>
                        <th>p_id</th>
                        <th>p_name</th>
                        <th>p_cost</th>
                    </tr>
                    {this.props.key5.map((element:any,index:number)=>(
                        <tr key={index}>
                            <td>{index+1}</td>
                            <td>{element.p_id}</td>
                            <td>{element.p_name}</td>
                            <td>{element.p_cost}</td>
                        </tr>
                    ))}
                </table>
            </React.Fragment>
        )
    }
}

export default Second;


index.tsx(add below code)
=========
import First from './First';
ReactDOM.render(
  <React.StrictMode>
  
    <First/>
  </React.StrictMode>,
  document.getElementById('root')
);



30-3-2020
==============

Passing data from parent to child and then passing data from child to sub-child

Parent.tsx
===========

import React from "react";
import Child from "./Child";

interface IProps {}

interface IState {
    name:string;
    brand:string;
    price:number;
    qty:number;
    stockLeft:number;
    image:string;
}

class Parent extends React.Component<IProps,IState>{
    constructor(props:IProps){
        super(props)
        this.state = {
            name:"Shirt",
            brand:"Polo",
            price:100,
            qty:3,
            stockLeft:100,
            image:"https://mean7pm.s3.ap-south-1.amazonaws.com/p1.jpg"
        }
    }

    render(){
        return(
            <React.Fragment>
                <Child  name={this.state.name}
                        brand={this.state.brand}
                        price={this.state.price}
                        qty={this.state.qty} 
                        stockLeft={this.state.stockLeft}
                        image={this.state.image}/>
                        
            </React.Fragment>
        )
    }
}
export default Parent;

Child.tsx
==========
import React from "react";
import SubChild from "./SubChild";
interface IProps {
    name:string;
    brand:string;
    price:number;
    qty:number;
    stockLeft:number;
    image:string;
}

interface IState {
    discount:number;
}

class Child extends React.Component<IProps,IState>{
    constructor(props:IProps){
        super(props)     
        this.state = {
            discount: 10
        }   
    }

    render(){
        return(
            <React.Fragment>
                <SubChild {...this.props} discount={this.state.discount}/>
            </React.Fragment>
        )
    }
}

export default Child;

SubChild.tsx
============

import React from "react";

interface IProps {
    name:string;
    brand:string;
    price:number;
    qty:number;
    stockLeft:number;
    image:string;

    discount:number;
}

interface IState {
}

class SubChild extends React.Component<IProps,IState>{
    constructor(props:IProps){
        super(props)        
    }

    render(){
        return(
            <React.Fragment>
                <table style={{border:"1px solid red"}}>
                    <tr>
                        <th>Name</th>
                        <th>Brand</th>
                        <th>Price</th>
                        <th>Qty</th>
                        <th>Stock Left</th>
                        <th>Image</th>
                        <th>Discount</th>
                    </tr>

                    <tr>
                        <td>{this.props.name}</td>
                        <td>{this.props.brand}</td>
                        <td>{this.props.price}</td>
                        <td>{this.props.qty}</td>
                        <td>{this.props.stockLeft}</td>
                        <td><img width="100" src={this.props.image}/></td>
                        <td>{this.props.discount}</td>
                    </tr>
                </table>
            </React.Fragment>
        )
    }
}

export default SubChild;

index.tsx(add below code)
===========
import Parent from './Parent';

ReactDOM.render(
  <React.StrictMode>
  
    <Parent/>
  </React.StrictMode>,
  document.getElementById('root')
);


31-03-2021
=================

Passing data from child to parent Component using event handlers


Parent.tsx
==========
import React, { Component } from 'react';
import Child from './Child';


interface IProps { }
interface IState {
    name: string;
    address: string;
    course: string;
}

class Parent extends Component<IProps, IState>{
    constructor(props: IProps) {
        super(props)
        this.state = {
            name: "AshokIT",
            address: "Hyderabad",
            course: "ReactJS"
        }        
    }

    updateCourse = ()=>{
        this.setState({
            course: "ReactJS with Typescript"
        })   
    }

    updateAddress = (addressArg:string)=>{
        this.setState({
            address: addressArg
        })
    }
    render() {
        return (
            <React.Fragment>                
                <Child name={this.state.name}
                        address={this.state.address}
                        course={this.state.course}
                        updateCourse={this.updateCourse}
                        updateAddress={this.updateAddress}/>
            </React.Fragment>
        )
    }
}
export default Parent;

Child.tsx
==========
import React, {Component} from 'react';

interface IProps{
    name: string;
    address: string;
    course: string;
    updateCourse: ()=>any;
    updateAddress:(addressArg:string)=>any;
}
interface IState{}

class Child extends Component<IProps,IState>{
    constructor(props:IProps){
        super(props)
    }
    render(){
        return(
            <React.Fragment>
                <h1>Name:{this.props.name}</h1>
                <h1>address:{this.props.address}</h1>
                <h1>course:{this.props.course}</h1>
                <button onClick={this.props.updateCourse}>UpdateCourse</button>
                <button onClick={()=>{this.props.updateAddress('Hyderabad,India')}}>UpdateAddress</button>
            </React.Fragment>
        )
    }
}
export default Child;

index.tsx(add below code)
=========
import Parent from './childToParent/Parent';

ReactDOM.render(
  <React.StrictMode>
  
    <Parent/>
  </React.StrictMode>,
  document.getElementById('root')
);

Also refer Demo1.tsx and Demo2.tsx example present in 31-03-2021 folder where data (key1,key2,fun_one,fun_two) of Demo1 component is passed to 
demo2 component and later in Demo2 Component we are changing key1,key2 values by using onClick event

Demo1.tsx
=========
import React, { Component } from "react";
import Demo2 from "./Demo2";
interface IState{
    param1:string;
    param2:string;
};
interface IProps{}
class Demo1 extends Component<IProps,IState>{
    constructor(props:IProps){
        super(props);
        this.state = {
            param1 : "Hello_1",
            param2 : "Hello_2"
        }
    };
    fun_one = (arg1:any):any=>{
        this.setState({
            param1 : arg1
        })
    };
    fun_two = (arg1:any):any=>{
        this.setState({
            param2 : arg1
        })
    };

    render(){
        return(
            <React.Fragment>
                <Demo2 key1={this.state.param1}
                       key2={this.state.param2}
                       key3={this.fun_one}
                       key4={this.fun_two}></Demo2>
            </React.Fragment>
        )
    }


};
export default Demo1;

Demo2.tsx
=========
import React from "react";
interface IProps{
    key1:string;
    key2:string;
    key3:(arg1:any)=>any;
    key4:(arg1:any)=>any;
}
interface IState{}
class Demo2 extends React.Component<IProps,IState>{
    constructor(props:IProps){
        super(props);
    };
    render(){
        return(
            <React.Fragment>
                <h1>{this.props.key1}</h1>
                <h1>{this.props.key2}</h1>
                <button onClick={ ()=>{this.props.key3("ReactJS")} }>ClickMe</button>
                <button onClick={ ()=>{this.props.key4("NodeJS")} }>ClickMe</button>
            </React.Fragment>
        )
    };
};
export default Demo2;

index.tsx
==========
import Demo1 from './childToParent/Demo1';

ReactDOM.render(
  <React.StrictMode>
  
    <Demo1/>
  </React.StrictMode>,
  document.getElementById('root')
);


05-04-2021
===============

References
    -  we will access "DOM elements" with the help of "References".
    -  we will create References by using "createRef()" predefined function in ReactJS.
    -  username = React.createRef<HTMLInputElement>() //create a reference
    -  this.username.current?.value //access the value


Login.tsx
=========
import React from "react";

interface IState {
    login_status: string
 }
interface IProps { }

class Login extends React.Component<IProps, IState>{
    constructor(props: IProps) {
        super(props)
        this.state = {
            login_status : ""
        }
    }

    u_name = React.createRef<HTMLInputElement>()
    u_pwd = React.createRef<HTMLInputElement>()

    login = () => {
        if (this.u_name.current?.value === "admin" &&
            this.u_pwd.current?.value === "admin") {
            this.setState({
                login_status: "Success"
            })
        }else{
            this.setState({
                login_status: "Failed"
            })
        }
    }

    render() {
        return (
            <React.Fragment>
                <input type="text" placeholder="username" ref={this.u_name} /> <br />
                <input type="password" placeholder="password" ref={this.u_pwd} /> <br />

                <button onClick={this.login}>Login</button>

                <p>{this.state.login_status}</p>
            </React.Fragment>
        )
    }
}
export default Login


Tried Register.tsx example (with firstname,lastname,email,phoneno,address,gender,languages,country) 

7-04-2021
=========
Rest Call example
    - we can make rest calls using axios 
    - Install axios using command >yarn add axios --save

Rest.tsx
========
import React, { Component } from "react";
import axios from "axios";
import { DataGrid } from "@material-ui/data-grid";
interface Country {
  name: string;
  capital: string;
  region: string;
  subregion: string;
  population: number;
  flag: string;
}
interface RestState {
  response: Country[];
}

interface RestProps {}
const columns = [
  { field: "name", headerName: "Name", width: 130 },

  { field: "capital", headerName: "Captial", width: 130 },

  { field: "region", headerName: "Region", width: 130 },
  { field: "subregion", headerName: "Sub Region", width: 200 },

  {
    field: "population",
    headerName: "Population",
    type: "number",
    width: 150
  },

  { field: "flag", headerName: "Flag", width: 350 }

  //     field: 'fullName',
  //     headerName: 'Full name',
  //     description: 'This column has a value getter and is not sortable.',
  //     sortable: false,
  //     width: 160,
  //     valueGetter: (params:any) =>
  //         `${params.getValue('firstName') || ''} ${params.getValue('lastName') || ''}`,
  // },
];

class Rest extends Component<RestProps, RestState> {
  constructor(props: RestProps) {
    super(props);
    this.state = {
      response: []
    };
  }

  componentDidMount() {
    axios.get("https://restcountries.eu/rest/v2/all").then(
      res => {
        console.log(res);
        const { data } = res; //destructuring
        console.log(data);
        const results = data.map((ele:any, index:any) => ({
          id: index,
          name: ele.name,
          capital: ele.capital,
          region: ele.region,
          subregion: ele.subregion,
          population: ele.population,
          flag: ele.flag
        }));
        console.log(results);
        this.setState({
          response: results
        });
      },
      err => {
        console.log(err);
      }
    );
  }

  render() {
    console.log(this.state.response);
    return (
      <React.Fragment>
        {/* {JSON.stringify(this.state.response)} */}

        <div style={{ height: 600, width: "100%" }}>
          <DataGrid rows={this.state.response} columns={columns} pageSize={8} />
        </div>
      </React.Fragment>
    );
  }
}

export default Rest;

index.tsx
========
import Rest from './rest-ex/Rest';

ReactDOM.render(
  <React.StrictMode>
    <Rest/>
  </React.StrictMode>,
  document.getElementById('root')
);


08-04-2021
===========
Rest example -2

CustRest.tsx
============

import axios from "axios";
import React,{Component} from "react";
interface CustRestProps{}
interface CustRestState{
    response:any
}

class CustRest extends Component<CustRestProps,CustRestState>{
    constructor(props:CustRestProps){
        super(props)
        this.state = {
            response : {}
        }
    }

    componentDidMount(){
        axios.get("https://www.w3schools.com/angular/customers.php").then(
            (posRes)=>{
                const {data} = posRes
                this.setState({
                    response: data
                })
            },(errRes)=>{
                console.log(errRes)
            })
    }

    render(){
        return(
            <React.Fragment>
                {JSON.stringify(this.state.response)}
            </React.Fragment>
        )
    }

}

export default CustRest;

index.tsx
=========
import CustRest from './rest-ex/CustRest';

ReactDOM.render(
  <React.StrictMode>
    <CustRest/>
  </React.StrictMode>,
  document.getElementById('root')
);
 (tried implementing using material table check git)

09-04-2021
==========

                                        **** MERN STACK DEVELOPMENT ****
        M - MongoDB        E - ExpressJS        R - ReactJS        N - NodeJS

        we are using "ReactJS" as Front End.
        we will use "NodeJS" as Backend.
        we will use "MongoDB" as DataBase.
        we will use "ExpressJS" to develop Rest Services.

        GET,  POST, PUT, DELETE  ---
        
MongoDB
-------
    - MongoDB is NoSQL DataBase (Won't Supports Either SQL or PLSQL).
    - MongoDB Supports the "JSON".
    - MongoDB DataBase is "Light Weight" DataBase.

Terminology
===========
                        SQL                                 NoSQL

    - Support Both SQL & PLSQL                      Wont Supports SQL or PLSQL.
    - MySQL, SQLServer,Oracle,...                   MongoDB
    - Won't Supports JSON                           Supports JSON.
    - Tables                                        Collection
    - DataBase                                      DataBase
    - Rows                                          Records
    - Primary Key                                   _id

    - MongoDB DataBase provides cloud support.

                URL : https://account.mongodb.com/account/login





12-04-2021
==============
implementation of MERN Stack application
========================================
1) deploy images to s3 bucket
    P1_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p1.jpg
    P2_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p2.jpg
    P3_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p3.jpg
    P4_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p4.jpg
    P5_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p5.jpg
    P6_Image : https://rjs05.s3.ap-south-1.amazonaws.com/p6.jpg

2) create the database in mongodb.

        DataBase Details:
        =================
        mongodb+srv://admin:admin@rjs-05.1glav.mongodb.net/MERN?retryWrites=true&w=majority
        uname : admin
        password : admin
        database : MERN
        collection : products

3) create the Node Server
    - "Node Server" is used to create the "Rest" API'S with the help of "ExpressJS".
    - we will develop Node application with the help of "JavaScript".
    - Node Supports the libraries.
=> mongodb
    - used to connect to "mongodb" database.
=> express
    - used to develop the "Rest" Services.
    Ex.
        GET
        POST
        PUT
        DELETE
        ---
        ---
        ---
=> body-parser
    - body-parser used to receive the data from Frontend.
=> cors
    - used to enable the "cors" policy.
    we will download above libraries with the help of "yarn" tool
    above libraries downloads to "node_modules" folder in current path.

step 1.
    create the folder
    Ex.
        node-backend

step 2.
    switch to server folder
    > cd node-backend

step 3.
    download the libraries.
    @mongodb,@express, @body-parser, @cors

    > yarn add mongodb express body-parser cors --save
                or
    > npm install mongodb express body-parser cors --save

Note : all the libraries downloads to "node_modules" folder in current path

step 4.
    create the server file
    index.js



14-04-2021
============

step 5.
    start the node server
    > node index.js
step 6.
    test the rest api by using "Postman".
   http://localhost:8080/products    (GET)

step 7.
    create the react application
    > npx create-react-app mern-app --template typescript

step 8.
    switch to react application
    > cd mern-app

step 9.
    download axios module
    => axios module used to make the rest api calls.
    => we will download axios module with the help of either yarn tool or npm tool.
    > yarn add axios --save

step 10.
    create the component
    ************************************
    mern-app
           src
             Products.tsx

             index.tsx

            public
              index.html
    **************************************





15-04-2021
===========
    added styles to table and revision

16-04-2021
==========
    Functional Component

17-04-2021
=========
    AppBar of Material UI







28-04-2021
================

    MERN STACK
                                        ----------
1) create the mongodb database.
        - MongoDB database is NoSQL database (won't support SQL & PLSQL).
        - MongoDB database supports JSON (won't support tables).
        - MongoDB database is light weight database.
        - MongoDB database supports cloud Environment.
        - MongoDB database provides cloud Environment in the form of a "MongoDB Atlas".
            URL : https://account.mongodb.com/account/login

Comparision
-----------
SQL DataBases                                               NoSQL DataBases
--------------                                              ----------------
Ex.
1)
    Oracle                                                      MongoDB
    MySQL                                                       CassandraDB
    SQLServer
2) tables                                                       collections
3) DataBases                                                    DataBases
4) primary key                                                  _id

creating the MongoDB Atlas account   (cloud)
--------------------------------------------
Details
-------
DataBase Name : RJS-06
Collection Name : products
password : admin
Connection URL : mongodb+srv://admin:admin@cluster0.hz6xa.mongodb.net/RJS-06?retryWrites=true&w=majority 



29-04-2021
==========

***** NodeJS *****

    - NodeJS is "server" side scripting language.
    - NodeJS, used to develop the "servers".
            Http Server
            TCP Server
    - we will develop "NodeJS" Applications by using "JavaScript".
    - NodeJS, supports libraries (modules).
    - we will download above libraries by using "yarn" tool.
    - all the libraries downloads to "node_modules" folder in current path.

modules
-------
1) express
    - express module, used to develop the rest services.
    Ex.
        GET
        POST
        PUT
        DELETE
        HEAD
        ---
        ---
        ---
2) mongodb
    - helps to connect to mongodb database.
3) body-parser
    - used to receive the data from client application
4) cors
    - used to enable the communication between different ports Available in application.

steps to create the "server"
============================
1) create directory
    Ex.
        server
2) switch to server folder
    > cd server
3) download the node modules.
    => express
    => body-parser
    => cors
    => mongodb
            > yarn add express body-parser cors mongodb --save
4) create the server file.
    Ex.
        server.js
5) start the node server
    > node server


6) test the following rest api call by using "Postman"

    => http://localhost:8080/products

******************
30-04-2021
******************
                                            implement rest api by using nodejs 
                                            ----------------------------------

download the images   (p1.png to p6.png)
deploy into AWS Server   (cloud images)
store images path into "MongoDB" DataBase
develop the rest api by using "NodeJS"  (GET Request)
test the rest api by using "Postman"

Cloud Images path's
-------------------
=> https://rjs-06.s3.ap-south-1.amazonaws.com/p1.jpg
=> https://rjs-06.s3.ap-south-1.amazonaws.com/p2.jpg
=> https://rjs-06.s3.ap-south-1.amazonaws.com/p3.jpg
=> https://rjs-06.s3.ap-south-1.amazonaws.com/p4.jpg
=> https://rjs-06.s3.ap-south-1.amazonaws.com/p5.jpg
=> https://rjs-06.s3.ap-south-1.amazonaws.com/p6.jpg

*****************************************************************************************************************
database name       :   ecommerce
collection name     :   products
URL : mongodb+srv://admin:admin@cluster0.hz6xa.mongodb.net/ecommerce?retryWrites=true&w=majority
*****************************************************************************************************************
create the folder
Ex.
    rev_server

switch to rev_server folder
    > cd rev_server

download the node modules
    1) express
            - express used to develop the rest services
    2) cors
            - used to enable the ports communicaction
    3) mongodb
            - used to connect to mongodb database
    4) body-parser
            - used to receive the data from client application
    > yarn add express cors mongodb body-parser --save

develop the rest api by using nodejs
    server.js


start the node server
    > node server

test the rest api by using Postman
    => http://localhost:8080/products


************************
03-05-2021
***********************

Integrate the Above Rest API Call to ReactJS
--------------------------------------------

1) create the react application
    > npx create-react-app redux-app --template typescript

2) switch to react application
    > cd redux-app

3) download the node modules
       => redux      @types/redux
       => react-redux     @types/react-redux
       => redux-thunk       @types/redux-thunk
       => axios             @types/axios
       
       > yarn add redux @types/redux react-redux @types/react-redux redux-thunk @types/redux-thunk axios @types/axios --save

4) create the modal
    we have following rest api call.
    http://localhost:8080/
    based on above response, we must create modal object


**********************************************
redux-thunk
         src
           modal
             Product.tsx
**********************************************

    finally "Product" modal is ready.




*********************
05-05-2021
***********************

step 5.create the types  (plan sheet)
    ****************************************
    redux-app
            src
              types
                 ProductActionTypes.tsx
    ****************************************

    finally "ProductsActionTypes" are ready.
        => ProductsLoading
        => ProductsLoadingSuccess
        => ProductsLoadingFail

step 6.implement the actions

    ****************************************
    redux-app
           src
             actions
               ProductsActions.tsx
    ***************************************

=================
06-05-2021
=====================

step 7. create the reducer
    **************************************
    redux-app
            src
              reducer
                ProductsReducer.tsx
    **************************************

        finally "ProductReducer" is ready


step 8. create the store
    index.tsx

step 9.
    apply the "dispatch" and "subscription" from "" component



=================================================
07-05-2021
==================================================



*********************************************
Thunk (Example)
*********************************************
URL : https://restcountries.eu/rest/v2/all

step 1. create the react application
    > npx create-react-app countries--redux-app --template typescript




